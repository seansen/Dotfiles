/* See LICENSE file for copyright and license details. */

/* appearance */
static const unsigned int borderpx  = 1;        /* border pixel of windows */
static const unsigned int gappx     = 5;        /* gaps between windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const unsigned int systraypinning = 0;   /* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X */
static const unsigned int systrayspacing = 2;   /* systray spacing */
static const int systraypinningfailfirst = 1;   /* 1: if pinning fails, display systray on the first monitor, False: display systray on the last monitor*/
static const int showsystray        = 1;     /* 0 means no systray */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */
static const Bool viewontag         = True;     /* Switch view on tag switch */
static const char *fonts[]          = { "monospace:size=10", "JoyPixels:pixelsize=10" };
/*static const char dmenufont[]       = "JoyPixels:pixelsize=12" ;*/
static const char dmenufont[]       = "monospace:pixelsize=12" ;
static const char col_gray1[]       = "#222222";
static const char col_gray2[]       = "#444444";
static const char col_gray3[]       = "#bbbbbb";
static const char col_gray4[]       = "#eeeeee";
static const char col_cyan[]        = "#6790EB";
static const unsigned int baralpha = 0xd0;
static const unsigned int borderalpha = OPAQUE;
static const char *colors[][3]      = {
	/*               fg         bg         border   */
	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
};
static const unsigned int alphas[][3]      = {
	/*               fg      bg        border     */
	[SchemeNorm] = { OPAQUE, baralpha, borderalpha },

	[SchemeSel]  = { OPAQUE, baralpha, borderalpha },
};

/* tagging */
static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
/* static const char *tags[] = { "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX" }; */
/* static const char *tags[] = { "ÔÇ¨", "Ôáã", "Ôáª", "ÔÉÉ", "ÔÄæ", "ÔÄΩ", "ÔÑâ", "ÔÅº", "ÔãÜ" }; */
/* static const char *tags[] = { "Web", "Chat", "Edit", "Meld", "Vb", "Mail", "Video", "Image", "Files" }; */


static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 *  use tags mask to point an application to a specific workspace
	 */
	/* class                       instance    title      tags mask      isfloating   monitor */
	{ "Gimp",                      NULL,       NULL,       0,            0,           -1 },
	{ "Xfce4-terminal",            NULL,       NULL,       0,            1,           -1 },
	{ "firefox",                   NULL,       NULL,       0,            0,           -1 },
	{ "Arcolinux-welcome-app.py",  NULL,       NULL,       0,            1,           -1 },
	{ "Arcolinux-calamares-tool.py",  NULL,       NULL,       0,            1,           -1 },
};

/* layout(s) */
static const float mfact     = 0.50; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */

#include "layouts.c"

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "üåë",      tile },    /* first entry is default */
	{ "üåó",      grid },    /* no layout function means floating behavior */
	{ "üåï",      monocle },
        { "üåï",      NULL},
	{ "üåí",      centeredmaster },
        { "üåò",      centeredfloatingmaster },
	{ NULL,       NULL },
};

/* key definitions */
#define MODKEY Mod4Mask

#define TAGKEYS(CHAIN,KEY,TAG) \
	{ MODKEY,                       CHAIN,    KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           CHAIN,    KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             CHAIN,    KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, CHAIN,    KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
static const char *filecmd[]  = { "thunar", NULL };
static const char *calendar[]  = { "gsimplecal", NULL };
static const char *taskmanager[]  = { "xfce4-taskmanager", NULL };
static const char *termcmd[]  = { "gnome-terminal", NULL };
static const char *firefoxcmd[]  = { "firefox", NULL };
static const char scratchpadname[] = "scratchpad";
static const char *scratchpadcmd[] = { "st", "-t", scratchpadname, "-g", "120x34", NULL };

#include "selfrestart.c"
#include "shiftview.c"


static Key keys[] = {
	/* modifier                     key        function        argument */
    { MODKEY,                      -1,  XK_t,      spawn,          {.v = termcmd } },
    { MODKEY|ShiftMask,            -1,  XK_t,      spawn,          SHCMD("~/.config/Cool-Retro-Term-1.1.1-x86_64.AppImage") },
    { MODKEY,                      -1,  XK_b,      spawn,          {.v = firefoxcmd } },
    { MODKEY|ShiftMask,            -1,  XK_w,      spawn,          SHCMD("~/.local/scripts/dwm_setbg ~/.local/share/wallpapers") },
    { MODKEY|ShiftMask,            -1,  XK_i,      spawn,          SHCMD("sxiv -t  ~/.dotfiles/wallpapers") },
    /* Nautilus */
    { MODKEY,                      -1,  XK_f,      spawn,          SHCMD("thunar") },
    /* Dmenu */
    { MODKEY,                    XK_d,  XK_d,      spawn,          {.v = dmenucmd } },
    { MODKEY,                    XK_d,  XK_w,      spawn,          SHCMD("~/.local/scripts/dmenu_emoji") },
    { MODKEY|ShiftMask,          XK_d,  XK_b,      spawn,          SHCMD("~/.local/scripts/dmenu_browser") },
    { MODKEY,                    XK_d,  XK_c,      spawn,          SHCMD("~/.local/scripts/dmenu_open_config") },
    { MODKEY,                    XK_d,  XK_k,      spawn,          SHCMD("./dmscripts/dmkill") },
    { MODKEY,                    XK_d,  XK_l,      spawn,          SHCMD("./dmscripts/dmlogout") },
    { MODKEY,                    XK_d,  XK_m,      spawn,          SHCMD("./dmscripts/dman") },
    { MODKEY,                    XK_d,  XK_r,      spawn,          SHCMD("./dmscripts/dmred") },
    { MODKEY,                    XK_d,  XK_y,      spawn,          SHCMD("./dmscripts/dmsearch") },
    { MODKEY,                    XK_d,  XK_p,      spawn,          SHCMD("passmenu") },
    { MODKEY,                    XK_d,  XK_f,      spawn,          SHCMD("dmenufm") },
    /* Emacs */
    { MODKEY,                    XK_e,  XK_e,      spawn,          SHCMD("emacsclient -c -a 'emacs'") },
    { MODKEY,                    XK_e,  XK_b,      spawn,          SHCMD("emacsclient -c -a 'emacs' --eval '(ibuffer)'") },
    { MODKEY,                    XK_e,  XK_d,      spawn,          SHCMD("emacsclient -c -a 'emacs' --eval '(dired nil)'") },
    { MODKEY,                    XK_e,  XK_m,      spawn,          SHCMD("emacsclient -c -a 'emacs' --eval '(mu4e)'") },
    { MODKEY,                    XK_e,  XK_n,      spawn,          SHCMD("emacsclient -c -a 'emacs' --eval '(elfeed)'") },
    { MODKEY,                    XK_e,  XK_s,      spawn,          SHCMD("emacsclient -c -a 'emacs' --eval '(eshell)'") },
    { MODKEY,                      -1,  XK_p,      spawn,          {.v = dmenucmd } },
    { MODKEY|ShiftMask,            -1,  XK_Return, spawn,          {.v = filecmd } },
    { MODKEY,                      -1,  XK_b,      togglebar,      {0} },
    /* Stack */
    { MODKEY,                      -1,  XK_j,      focusstack,     {.i = +1 } },
    { MODKEY,                      -1,  XK_k,      focusstack,     {.i = -1 } },
    { MODKEY,                      -1,  XK_Up,     focusstack,     {.i = +1 } },
    { MODKEY,                      -1,  XK_Down,   focusstack,     {.i = -1 } },
    { MODKEY,                      -1,  XK_i,      incnmaster,     {.i = +1 } },
    { MODKEY,                      -1,  XK_z,      incnmaster,     {.i = -1 } },
    { MODKEY,                      -1,  XK_h,      setmfact,       {.f = -0.05} },
    { MODKEY,                      -1,  XK_l,      setmfact,       {.f = +0.05} },
    { MODKEY,                      -1,  XK_minus,  setgaps,        {.i = -1 } },
    { MODKEY,                      -1,  XK_equal,  setgaps,        {.i = +1 } },
    { MODKEY|ShiftMask,            -1,  XK_equal,  setgaps,        {.i = 0  } },
    /*{ MODKEY,                    -1,  XK_Return, zoom,           {0} },*/
    /*{ MODKEY,                    -1,  XK_Tab,    view,           {0} },*/
    { MODKEY|ShiftMask,   	   -1,  XK_q,      killclient,     {0} },
    { MODKEY,		           -1,  XK_q,      killclient,     {0} },
    /* LAYOUTS*/
    { MODKEY,                      -1,  XK_n,      setlayout,      {.v = &layouts[0]} },
    { MODKEY,                      -1,  XK_c,      setlayout,      {.v = &layouts[1]} },
    { MODKEY,                      -1,  XK_m,      setlayout,      {.v = &layouts[2]} },
    { MODKEY,                      -1,  XK_w,      setlayout,      {.v = &layouts[3]} },
    { MODKEY,                      -1,  XK_u,      setlayout,      {.v = &layouts[4]} },
    /* Cycle Layouts */
    { MODKEY|ShiftMask, 	   -1,  XK_Left,   cyclelayout,    {.i = -1 } },
    { MODKEY|ShiftMask,            -1,  XK_Right,  cyclelayout,    {.i = +1 } },
    /* Scratchpad */
    { MODKEY,                      -1,  XK_s,      togglescratch,  {.v = scratchpadcmd } },
    { MODKEY|ShiftMask,            -1,  XK_space,  togglefloating, {0} },
    { MODKEY,                      -1,  XK_0,      view,           {.ui = ~0 } },
    { MODKEY|ShiftMask,            -1,  XK_0,      tag,            {.ui = ~0 } },
    { MODKEY,                      -1,  XK_comma,  focusmon,       {.i = -1 } },
    { MODKEY,                      -1,  XK_period, focusmon,       {.i = +1 } },
    { MODKEY|ShiftMask,            -1,  XK_comma,  tagmon,         {.i = -1 } },
    { MODKEY|ShiftMask,            -1,  XK_period, tagmon,         {.i = +1 } },
    { MODKEY|ShiftMask,            -1,  XK_r,      self_restart,   {0} },
    { Mod1Mask|ControlMask,        -1,  XK_Right,  shiftview,      {.i =  1 } },
    { Mod1Mask|ControlMask,        -1,  XK_Left,   shiftview,      {.i = -1 } },
    { Mod1Mask|ControlMask,        -1,  XK_Up,     shiftview,      {.i =  1 } },
    { Mod1Mask|ControlMask,        -1,  XK_Down,   shiftview,      {.i = -1 } },
    { Mod1Mask,		           -1,  XK_Tab,    shiftview,      {.i =  1 } },
    { Mod1Mask|ShiftMask,          -1,  XK_Tab,	   shiftview,	   {.i = -1 } },
    { MODKEY,		           -1,  XK_Tab,    shiftview,	   {.i =  1 } },
    { MODKEY|ShiftMask,	           -1,  XK_Tab,	   shiftview,	   {.i = -1 } },


	TAGKEYS(                       -1,  XK_1,                      0)
	TAGKEYS(                       -1,  XK_2,                      1)
	TAGKEYS(                       -1,  XK_3,                      2)
	TAGKEYS(                       -1,  XK_4,                      3)
	TAGKEYS(                       -1,  XK_5,                      4)
	TAGKEYS(                       -1,  XK_6,                      5)
	TAGKEYS(                       -1,  XK_7,                      6)
	TAGKEYS(                       -1,  XK_8,                      7)
	TAGKEYS(                       -1,  XK_9,                      8)
};

/* IF YOU HAVE A AZERTY KEYBOARD USE THESE CODES
	TAGKEYS(                        XK_ampersand,              0)
	TAGKEYS(                        XK_eacute,                 1)
	TAGKEYS(                        XK_quotedbl,               2)
	TAGKEYS(                        XK_apostrophe,             3)
	TAGKEYS(                        XK_parenleft,              4)
	TAGKEYS(                        XK_section,                5)
	TAGKEYS(                        XK_egrave,                 6)
	TAGKEYS(                        XK_exclam,                 7)
	TAGKEYS(                        XK_ccedilla,               8)
*/

/* THESE ARE THE ORIGINAL QWERTY KEYBOARD CODES
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
*/

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button1,        spawn,          {.v = taskmanager } },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = filecmd } },
	{ ClkStatusText,        0,              Button3,        spawn,          {.v = calendar } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};
